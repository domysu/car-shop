@using AutomobiliuPardavimoPrograma.Models
@using AutomobiliuPardavimoPrograma.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject CarService CarService
@inject UserService UserService
@inject UserCarLikesService CarLikesService
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer

            <CardBody class="bg-slate-50 w-full">
                <Tabs SelectedTab="@selectedTabName1" SelectedTabChanged="@OnSelectedTabChanged1">
                    <Items>
                        @tabItems
                    </Items>
                    <Content>
                        @tabContent
                    </Content>
                </Tabs>
            </CardBody>

@code{

    [Parameter]
    public int Id {get;set;}
    public bool canUserEditProfile = false;
     private RenderFragment tabItems => __builder =>
    {
        <Tab Name="cars"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5 inline">
  <path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z" />
</svg>
Išsaugotos mašinos</Tab>
       
        <Tab Name="skelbimai"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5 inline">
  <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h3.75M9 15h3.75M9 18h3.75m3 .75H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08m-5.801 0c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 13.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m0 0H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V9.375c0-.621-.504-1.125-1.125-1.125H8.25ZM6.75 12h.008v.008H6.75V12Zm0 3h.008v.008H6.75V15Zm0 3h.008v.008H6.75V18Z" />
</svg>
Skelbimai</Tab>
        
        @if(canUserEditProfile)
        {
      
        <Tab Name="nustatymai"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-5 inline">
  <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 6h9.75M10.5 6a1.5 1.5 0 1 1-3 0m3 0a1.5 1.5 0 1 0-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-9.75 0h9.75" />
</svg>

         Nustatymai</Tab>
         
        }   
    };
    private RenderFragment tabContent => __builder =>
    {
        <TabPanel Name="cars">
            
           <ProfileCarList car="userLikedCarsList" errorMessage="carsMessage"></ProfileCarList>
        </TabPanel>
        <TabPanel Name="skelbimai">
            <ProfileCarList car="userPosts" errorMessage="carsMessage2"></ProfileCarList>
        </TabPanel>
        <TabPanel Name="nustatymai">
            <Settings currentUser="currentUser"> </Settings>
        </TabPanel>
    };
   
private string selectedTabName1 = "cars";
private string carsMessage = "Naudotojas dar neišsaugojo jokiu skelbimų..";
private string carsMessage2 = "Naudotojas dar nepaskelbė jokiu skelbimų..";


       private void OnSelectedTabChanged1( string name )
    {
        selectedTabName1 = name;
    }

    private Vartotojas? currentUser { get; set; }
    public List<Automobilis>? autoList = new();

    public List<UserPostLikes>? userLikesList = new();
    public List<Automobilis>? userLikedCarsList = new();
    public List<Automobilis>? userPosts = new(); 

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GautiPagalIdAsync(Id);
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if(user.FindFirst(ClaimTypes.NameIdentifier)?.Value == currentUser.Id.ToString())
        {
            canUserEditProfile = true;
        }
        else canUserEditProfile = false;
        
        userLikesList = await CarLikesService.GautiVisusByIdAsync(Id);
        autoList = await CarService.GautiVisusAsync();
    
        userPosts = await CarService.GautiVisusNaudotojoSkelbimus(Id);
    
  
        // 2) Extract the liked-car IDs
        var likedIds = userLikesList
        .Select(like => like.PostId)
        .ToHashSet();

        // 3) Filter in-memory and use ToList()
        userLikedCarsList = autoList
        .Where(car => likedIds.Contains(car.Id))
        .ToList();





    }
}
