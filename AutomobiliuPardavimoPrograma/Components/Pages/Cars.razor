@page "/cars"
@using AutomobiliuPardavimoPrograma.Models
@rendermode InteractiveServer
@using AutomobiliuPardavimoPrograma.Components
@using AutomobiliuPardavimoPrograma.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject UserCarLikesService UserCarLikesService
@using Microsoft.AspNetCore.Authorization   
@inject AuthenticationStateProvider AuthStateProvider
@inject UserService UserService
@inject CarService CarService
@attribute [Authorize]

<PageTitle>Cars</PageTitle>




<div class="@($" bg-gray-100  rounded flex gap-4 items-end transform transition-all duration-100 ease-in-out {(isMenuOpen ? "opacity-100 translate-y-0 max-h-screen p-4" : "p-0 opacity-0 -translate-y-1 max-h-0")}")">
  <!-- Marke filter -->
  <div>
    <label>Marke:</label>
    <InputText @bind-Value="filterMarke"
               placeholder="Įveskite Marke"
               class="border px-2 py-1 rounded"
    />
  </div>

  <!-- Price range -->
  <div>
    <label>Kaina € nuo:</label>
    <InputNumber @bind-Value="filterMinPrice"
                 class="border px-2 py-1 rounded w-24"/>
  </div>
  <div>
    <label>iki:</label>
    <InputNumber @bind-Value="filterMaxPrice"
                 class="border px-2 py-1 rounded w-24"/>
  </div>

  <!-- Gearbox -->
  <div>
    <label>Pavarų dėžė:</label>
    <InputSelect @bind-Value="filterPavaruDeze"
                 class="border px-2 py-1 rounded">
      <option value="">Visos</option>
      <option value="Mechanine">Mechaninė</option>
      <option value="Automatine">Automatinė</option>
    </InputSelect>
  </div>

  <!-- Fuel type -->
  <div>
    <label>Kuras:</label>
    <InputSelect @bind-Value="filterKuroTipas"
                 class="border px-2 py-1 rounded">
      <option value="">Visi</option>
      <option value="Benzinas">Benzinas</option>
      <option value="Dyzelis">Dyzelis</option>
      <option value="Elektra">Elektra</option>
      <option value="Hybridas">Hybridas</option>
    </InputSelect>
  </div>

  <!-- Buttons -->
  <div class="flex gap-2">
    <button class="bg-blue-500 text-white px-3 py-1 rounded"
            @onclick="ApplyFilters">
      Filtruoti
    </button>
    <button class="bg-gray-300 px-3 py-1 rounded"
            @onclick="ResetFilters">
      Išvalyti
    </button>
  </div>
</div>

<div class="flex gap-2">
<div class="mb-2 text-white align-middle mt-2">

    <button class="bg-green-400 p-2 px-3 rounded-md hover:bg-green-500" @onclick="() => modalRef.ShowModal()"> Įkelti skelbimą </button>
    <AddCarModal @ref="modalRef" CurrentUserId="currentUserId" OnCarAdded="HandleNewCar" />
  
 
    
</div>
<button @onclick="() => ToggleMenu()" class="flex gap-1 p-2 self-center bg-slate-500 hover:bg-slate-600 rounded-md px-3 text-gray-300">
 <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6 self-center ">
  <path stroke-linecap="round" stroke-linejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z" />
</svg>
Filtruoti
</button>
</div>

@if (filteredAutomobiliai == null)
{
  <p>Kraunama...</p>
}
else if (!filteredAutomobiliai.Any())
{
  <p>Nieko nerasta pagal nurodytus kriterijus.</p>
}
else
{
  <div class="gap-4">
    @foreach (var car in filteredAutomobiliai)
    {
      <CarItem Car="car" CurrentUserId="currentUserId" UserPostLikes="laikai"  />
    }
  </div>
}

@code {
  private List<Automobilis> automobiliai;
  private List<UserPostLikes> laikai;

  private List<Automobilis> filteredAutomobiliai;
  public int currentUserId = -1;

  bool isMenuOpen = false;
  void ToggleMenu() => isMenuOpen = !isMenuOpen;

  // filter fields
  private string filterMarke = "";
  private decimal? filterMinPrice;
  private decimal? filterMaxPrice;
  private string filterPavaruDeze = "";
  private string filterKuroTipas = "";

  protected override async Task OnInitializedAsync()
  {
        
    await getUser();
    automobiliai = await CarService.GautiVisusAsync();
    laikai = await UserCarLikesService.GautiVisusAsync();
    filteredAutomobiliai = automobiliai;
  }
  private void HandleNewCar(Automobilis car)
  {
    automobiliai.Add(car);
  }
  private void ApplyFilters()
  {
    if (automobiliai is null) return;

    var query = automobiliai.AsEnumerable();

    if (!string.IsNullOrWhiteSpace(filterMarke))
      query = query.Where(a =>
        a.Marke?.Contains(filterMarke, StringComparison.OrdinalIgnoreCase) ?? false);

    if (filterMinPrice.HasValue)
      query = query.Where(a => a.Kaina >= filterMinPrice.Value);

    if (filterMaxPrice.HasValue)
      query = query.Where(a => a.Kaina <= filterMaxPrice.Value);

    if (!string.IsNullOrEmpty(filterPavaruDeze))
      query = query.Where(a => a.PavaruDeze == filterPavaruDeze);

    if (!string.IsNullOrEmpty(filterKuroTipas))
      query = query.Where(a => a.KuroTipas == filterKuroTipas);

    filteredAutomobiliai = query.ToList();
    
  }

  private void ResetFilters()
  {
    filterMarke = "";
    filterMinPrice = null;
    filterMaxPrice = null;
    filterPavaruDeze = "";
    filterKuroTipas = "";
    filteredAutomobiliai = automobiliai;
  }

  public async Task getUser()
  {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user      = authState.User;
        if(!user.Identity.IsAuthenticated)return ;

      
        var userName = user.Identity.Name;
        if (string.IsNullOrWhiteSpace(userName))
        throw new InvalidOperationException("User.Identity.Name was empty.");

        var currentUser = await UserService.GautiPagalUserNameAsync(userName);
        if (currentUser == null)
        throw new InvalidOperationException($"No user record found for '{userName}'.");
        currentUserId = currentUser.Id;

  }


    private AddCarModal modalRef;

   
}
