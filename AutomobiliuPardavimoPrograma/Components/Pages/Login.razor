@page "/login"
@using AutomobiliuPardavimoPrograma.Models;
@using AutomobiliuPardavimoPrograma.Services;

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject AuthenticationStateProvider AuthProvider
@inject AppDbContext db
@inject UserService UserService
@inject NavigationManager Navigation





<PageTitle>Prisijungimas</PageTitle>

<div class="min-h-screen flex items-center justify-center  px-4">
  <div class="w-full max-w-md bg-white p-8 rounded-lg shadow-lg">
    @if (showSuccessMessage)
    {

      <div class="text-center bg-green-400 text-white">
        @successMessage

      </div>

    }
    @if (showErrorMessage)
    {
      <div class="text-center bg-red-400 text-white">

        @errorMessage
      </div>
    }
    <h2 class="text-2xl font-bold mb-6 text-slate-700 text-center">Prisijungti</h2>

    <EditForm Model="LoginModel" OnValidSubmit="LogIn" FormName="LoginForm">
      <DataAnnotationsValidator />
      



      <div class="mb-4">
        <label class="text-sm font-medium text-slate-700 mb-1" for="email">El. paštas</label>
        <InputText id="email" type="email" @bind-Value="LoginModel.Email"
          class="w-full px-4 py-2 border border-slate-300 rounded-md" />
      </div>

      <div class="mb-6">
        <label class="text-sm font-medium text-slate-700 mb-1" for="password">Slaptažodis</label>
        <InputText id="password" type="password" @bind-Value="LoginModel.Password"
          class="w-full px-4 py-2 border border-slate-300 rounded-md" />
      </div>

      <button type="submit"
        class="w-full bg-amber-400 hover:bg-amber-500 text-white font-semibold py-2 rounded-md transition">
        Prisijungti
      </button>
    </EditForm>

    <p class="mt-4 text-sm text-center text-slate-500">
      Dar neturi paskyros?
      <a href="/register" class="text-amber-500 hover:underline">Prisiregistruok čia!</a>
    </p>
  </div>
</div>








@code {

  private const string LoginForm = "LoginForm";
  [CascadingParameter]
  public HttpContext? HttpContext{get;set;}

  [SupplyParameterFromForm(FormName = LoginForm)]
  private LoginModel LoginModel {get;set;} = new();
  private string? enteredEmail;
  private string? enteredPassword;
    
  private string errorMessage = "";
  private string successMessage = "";
  private bool showErrorMessage = false;
  private bool showSuccessMessage = false;

    protected override async Task OnInitializedAsync()
  {
    var authState = await AuthProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if(user.Identity != null && user.Identity.IsAuthenticated)
    {
      Navigation.NavigateTo("/cars");
    }

  }

  private async Task LogIn()
  {
    var result = await UserService.AuthenticateAsync(LoginModel.Email, LoginModel.Password);
    

    if (result == null)
    {
      showErrorMessage = true;
      errorMessage = "Email or Password is incorrect!";
      return;
    }
    showErrorMessage = false;
    var claims = new List<Claim>
    {
      new Claim(ClaimTypes.NameIdentifier, result.Id.ToString()),
      new Claim(ClaimTypes.Name, result.Vardas),
      new Claim(ClaimTypes.Role, result.YraAdmin ? "Admin" : "User"),
      
    };
    var identity = new ClaimsIdentity(claims, "Cookies");
    var principal = new ClaimsPrincipal(identity);
    await HttpContext.SignInAsync("Cookies", principal);
    Navigation.NavigateTo("/cars");
    

  }
}