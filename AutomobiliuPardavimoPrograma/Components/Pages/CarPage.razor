@page "/car/{Id:int}"
@using AutomobiliuPardavimoPrograma.Models
@using Microsoft.AspNetCore.Components.Authorization
@using AutomobiliuPardavimoPrograma.Services
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthStateProvider
@inject UserService UserService
@inject UserCarLikesService UserCarLikesService


@inject CarService CarService

@if (Car == null || Car.Nuotraukos == null || Car.Nuotraukos.Count == 0)
{
    <h1> Loading.. </h1>
}
else
{
    <AddCarModal @ref="modalRef" CurrentUserId="currentUserId" isEditing="true" EditAuto="Car" />
    <div class="rounded-md justify-center px-2 w-[1200px]">
        <div class="flex justify-end">
            <div class="self-center">
                <span class="mr-2">Publisher: <a href="@($"user/{postCreator.Id}")" class="hover:underline cursor-pointer font-bold">@postCreatorUsername</a></span>
                <span class="text-lg">@postLikesCount</span>
            </div>
           
            @if (!isLiked)
            {
                <button @onclick="HandleLike" @onclick:stopPropagation> <svg xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-9 text-amber-500">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z" />
                    </svg></button>
            }
            else
            {
                <button @onclick="HandleLike" class="" @onclick:stopPropagation><svg xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24" fill="currentColor" class="size-9 text-amber-500  ">
                        <path fill-rule="evenodd"
                            d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
                            clip-rule="evenodd" />
                    </svg></button>

            }
            <Dropdown Class="p-0 m-0">
                    <DropdownToggle ToggleIconVisible="false" class="!py-0 !px-1.5 hover:bg-slate-200 rounded-full">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-7">
  <path stroke-linecap="round" stroke-linejoin="round" d="M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
</svg>


                    </DropdownToggle>
                    <DropdownMenu >
                        <DropdownItem @onclick="() => modalRef.ShowModal()" class=" flex gap-2  "><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
</svg>
Edit</DropdownItem>
                        <DropdownDivider />
                        <DropdownItem class="bg-red-500 hover:bg-red-600 text-white font-light flex gap-2"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
</svg>
Delete</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
        </div>
        <div>
            <img src="@Car.Nuotraukos[selectedCarIndex]" alt="@Car.Marke" class="object-cover h-[500px] w-[1200px] rounded-md rounded-b-none" >
            @if(Car.Nuotraukos.Count > 1){
            <div class="w-[1185px] h-[150px]  rounded-md rounded-t-none flex">
            @for(int i=0; i < Car.Nuotraukos.Count; i++)
            {
                var index = 0;
                index = i;
                
                <img @onclick="() => selectedCarIndex = index" src="@Car.Nuotraukos[i]" alt="@Car.Marke" class="object-cover h-[100px] mt-[3px] mr-[3px] hover:opacity-80 cursor-pointer" >
            }
          </div>
            }
         
        </div>
        <div class="border-b-2">
            <h1 class="text-2xl font-bold">@Car.Marke @Car.Modelis @Car.Metai m</h1>
            <h1 class="text-4xl mt-4 font-semibold"> @Car.Kaina.ToString("F0") € </h1>
           
        </div>
        <div class="grid grid-cols-2 gap-4 text-2xl mt-4">
            <div class="flex gap-2 items-center">
                <img src="images/road.svg" alt="Rida" class="h-8 w-8">
                <h1>Rida: @Car.Rida km</h1>
            </div>

            <div class="flex gap-2 items-center">
                <img src="images/gearstick.svg" alt="Pavarų dežė" class="h-8 w-8">
                <h1>Pavarų dėžė: @Car.PavaruDeze</h1>
            </div>

            <div class="flex gap-2 items-center">
                <img src="images/fuel.svg" alt="Kuro tipas" class="h-8 w-8">
                <h1>Kuro tipas: @Car.KuroTipas</h1>
            </div>

            <div class="flex gap-2 items-center">
                <img src="images/calendar.svg" alt="Metai" class="h-8 w-8">
                <h1>Metai: @Car.Metai </h1>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public int Id { get; set; }
    private int currentUserId = -1;
    private Vartotojas postCreator {get;set;}
    private string postCreatorUsername = "";
    private int postLikesCount = 0;
    private Automobilis Car = new();
    private List<UserPostLikes> UserPostLikes;
    
    private int selectedCarIndex = 0;
    
     
    private bool isLiked = false;
    private AddCarModal modalRef;      

    protected override async Task OnInitializedAsync()
    {
        await getUserAndLikes();
       
        Car = await CarService.GautiPagalIdAsync(Id);
        postCreator = await UserService.GautiPagalIdAsync(Car.CreatedById);
        postCreatorUsername = postCreator.Vardas;
        postLikesCount = UserPostLikes?.Where(x => x.PostId == Car.Id).Count() ?? 0;

        isLiked = UserPostLikes?.Any(x => x.PostId == Car.Id
        && x.UserId == currentUserId) ?? false;
        





    }

    public async Task getUserAndLikes()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity.IsAuthenticated) return;


        var userName = user.Identity.Name;

        if (string.IsNullOrWhiteSpace(userName))
            throw new InvalidOperationException("User.Identity.Name was empty.");

        var currentUser = await UserService.GautiPagalUserNameAsync(userName);
        if (currentUser == null)
            throw new InvalidOperationException($"No user record found for '{userName}'.");
        currentUserId = currentUser.Id;

        UserPostLikes = await UserCarLikesService.GautiVisusAsync();



    }

    public async Task HandleLike()
    {
        if (currentUserId == -1)
        {

            return;
        }
        await UserCarLikesService.AddLike(Car.Id, currentUserId);
        postLikesCount = isLiked ? --postLikesCount : ++postLikesCount;
        isLiked = !isLiked;
        


    }
    public async Task Edit()
    {
        
    }
}