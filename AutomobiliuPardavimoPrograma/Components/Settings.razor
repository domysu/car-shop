@using AutomobiliuPardavimoPrograma.Models
@using AutomobiliuPardavimoPrograma.Services
@inject UserService UserService
@inject NavigationManager NavigationManager

@if (currentUser == null)
{
    <p> Kraunasi.. </p>
}
else
{
    <EditForm Model="UserEditModel" OnSubmit="HandleEdit" FormName="EditUserForm">
        <DataAnnotationsValidator />
        <div class="flex flex-col w-[185px] space-y-2">
            <label> Change your information</label>
            <InputText type="text"  placeholder="@currentUser.Vardas" @bind-Value="UserEditModel.Name"
                class="rounded-md border-slate-300 bg-slate-50"> </InputText>
            <InputText type="email" placeholder="@currentUser.ElPastas" @bind-Value="UserEditModel.Email"
                class="rounded-md border-slate-300 bg-slate-50"> </InputText>
            <InputText type="password" @bind-Value="UserEditModel.CurrentPassword" placeholder="Dabartinis slaptažodis"
                class="rounded-md border-slate-300 bg-slate-50"> </InputText>
            <InputText type="password" @bind-Value="UserEditModel.Password" placeholder="Naujas slaptažodis"
                class="rounded-md border-slate-300 bg-slate-50"> </InputText>
           

            <button class="p-2 bg-amber-300 text-black hover:bg-amber-400 rounded-sm" type="submit"> Submit </button>

        </div>
    </EditForm>
}

@code {
     private const string EditUserForm = "EditUserForm";
    [SupplyParameterFromForm(FormName = EditUserForm)]
    public UserEditModel UserEditModel { get; set; } = new();

    [Parameter]
    public Vartotojas currentUser {get;set;}
    


    private async Task HandleEdit()
    {
        // TODO: CHECK FOR AUTH USER ID TO CURRENT USER

        currentUser.Vardas = UserEditModel.Name;
        currentUser.ElPastas = UserEditModel.Email;
         NavigationManager.NavigateTo("/logout", forceLoad:true); 
        await UserService.AtnaujintiAsync(currentUser);
       

    }
}