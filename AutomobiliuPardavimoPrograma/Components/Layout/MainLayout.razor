@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using AutomobiliuPardavimoPrograma.Services
@using AutomobiliuPardavimoPrograma.Components
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject UserService UserService
@using System.Security.Claims


<div class="page">
    <main>
        <div
            class="bg-gradient-to-b text-slate-500 from-slate-100 via-slate-50 to-slate-200 p-4 flex items-center relative">


            <a href="/cars" class=" flex gap-2 p-1 hover:bg-slate-300 px-2 cursor-pointer rounded-full"><svg
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25" />
                </svg>

                Skelbimai

            </a>


            <AuthorizeView>
                <Authorized>
                    <div class="absolute right-1 flex text-center">
                        <span class="text-green-700  flex ">


                            <a href="@($"/user/{userId}")" class="hover:bg-green-100 p-2 flex gap-1 rounded-full ">

                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" />
                                </svg>

                                <b> @context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value </b>

                            </a>
                        </span>

                        <a class="text-red-500 p-2 hover:bg-red-50 rounded-full gap-1 flex" href="/logout">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M15.75 9V5.25A2.25 2.25 0 0 0 13.5 3h-6a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 7.5 21h6a2.25 2.25 0 0 0 2.25-2.25V15m3 0 3-3m0 0-3-3m3 3H9" />
                            </svg>
                            Atsijungti
                        </a>
                    </div>

                </Authorized>
                <NotAuthorized>
                    <div class="absolute right-1 p-2">
                        <a href="/login" class="text-slate-500 mr-1 cursor-pointer hover:underline">Prisijungti</a>
                        <a href="/register" class="text-slate-500 cursor-pointer hover:underline">Registruotis</a>
                    </div>

                </NotAuthorized>
            </AuthorizeView>

        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>



@code {
    private int userId = -1;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity.IsAuthenticated) return;


        var userName = user.Identity.Name;
        var currentUser = await UserService.GautiPagalUserNameAsync(userName);
        userId = currentUser.Id;



    }

}
